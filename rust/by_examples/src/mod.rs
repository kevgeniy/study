// Модуль создает новую область вилимости с приватными(по умолчанию) и публичными(pub) членами
// модули можно импортировать и они могут быть вложены
// для сокращения именования можно использовать use

// Для краткости к членам текущего модуля можно обращаться через self, 
// а к членам родительского - через super:

mod my {
	pub fn print_int(i: i32) {
		println!("print_int: {}", i);
	}
	fn print_int_private(i: i32) {
		println!("print_int_private: {}", i);
	}
	mod inaccessible {
	}
	pub mod nested {
		pub fn print_int_nested(i: i32) {
			println!("print_int_nested: {}", i);
		}
		pub fn test() {
			use my::print_int_private as pip;
			self::print_int_nested(4);
			super::print_int_private(4);
			pip(4);
		}
	}
}

use my::nested as nst;

fn main() {
	nst::print_int_nested(4);
	my::nested::print_int_nested(4);
	my::print_int(4);
}

// У структур существует дополнительный уровень видимости - поля
// публичная структура => можно использовать ее значения и публичные функции
// но нельзя напрямую инициализировать поля. Для этого нужно чтобы и поля были публичными
// все это имеет смысл, только если мы находимся снаружи модуля.

// по аналогии с java именование мб связано с файлами:
// mod my;
// найти файл my.rs или my/mod.rs и загрузить его содержимое в модуле my
// таким образом можно выстроить древовидную структуру
// важно помнить, что нам будут доступны только публичные объекты из этого файла